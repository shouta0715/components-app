// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator fabbrica {
  provider = "prisma-fabbrica"
  output   = "../src/tests/fabbrica"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ************************************************************
//   Auth.js v5 schema 
// ************************************************************

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]

  // CUSTOM FIELDS
  components Component[]
  likes      Like[]
  followers  Follow[]    @relation("follower")
  followings Follow[]    @relation("following")

  profile Profile?

  @@map("users")
}

model Profile {
  userId String @id
  user   User   @relation(fields: [userId], references: [id])

  website String?
  github  String?
  twitter String?

  @@map("profiles")
}

model Follow {
  createdAt DateTime @default(now())

  // RELATIONSHIPS
  followerId  String
  follower    User   @relation("follower", fields: [followerId], references: [id])
  followingId String
  following   User   @relation("following", fields: [followingId], references: [id])

  @@id([followerId, followingId])
  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
  @@map("follows")
}

model Category {
  name        String  @id
  description String?

  // MANY FILEDS
  components Component[]

  @@map("categories")
}

model Component {
  id           String   @id @default(cuid())
  name         String
  description  String?
  draft        Boolean  @default(true)
  document     String   @db.Text
  previewUrl   String
  functionName String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // RELATIONSHIPS
  category     Category @relation(fields: [categoryName], references: [name])
  categoryName String
  creatorId    String
  creator      User     @relation(fields: [creatorId], references: [id])

  // MANY FILEDS
  files File[]
  likes Like[]

  @@index([creatorId])
  @@index([categoryName])
  @@map("components")
}

enum Extension {
  html
  css
  js
  jsx
  ts
  tsx
}

model File {
  id        Int       @id @default(autoincrement())
  objectId  String
  name      String    @default("index")
  extension Extension

  // RELATIONSHIPS
  componentId String
  component   Component @relation(fields: [componentId], references: [id])

  @@index([componentId])
  @@index([objectId])
  @@map("files")
}

model Like {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  // RELATIONSHIPS
  componentId String
  component   Component @relation(fields: [componentId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@index([componentId])
  @@index([userId])
  @@unique([componentId, userId])
  @@map("likes")
}
