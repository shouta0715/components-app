// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
  

}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  components    Component[]
  subscriptions UserSubscription[]
  purchases     Purchase[]
  reviews       Review[]
}

model Plan {
  id            Int                @id @default(autoincrement())
  name          String
  description   String            @db.Text
  price         Float
  created_at     DateTime           @default(now())
  updated_at     DateTime           @updatedAt
  subscriptions UserSubscription[]
}

model UserSubscription {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [user_id], references: [id])
  user_id    String
  plan      Plan      @relation(fields: [plan_id], references: [id])
  plan_id    Int
  start_date DateTime
  end_date   DateTime?
  status    String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  stripe_checkout_session_id String?
  stripe_payment_id String?
  payment_status String?

  @@index([user_id])
  @@index([plan_id])
}

model Category {
  id          String       @id @default(cuid())
  name        String       @unique
  description String?
  components  Component[]
}

model Component {
  id                String             @id @default(cuid())
  creator           User               @relation(fields: [creator_id], references: [id])
  creator_id         String
  name              String
  description       String?
  price             Float
  free              Boolean            @default(false)
  created_at         DateTime           @default(now())
  updated_at         DateTime           @updatedAt
  category          Category           @relation(fields: [category_id], references: [id])
  category_id        String
  component_set_items ComponentSetItem[]
  reviews           Review[]
  codes             Code[]
  purchases         Purchase[]

  @@index([creator_id])
  @@index([name])
  @@index([category_id])
}

model Code {
  id            String       @id @default(cuid())
  url           String       @db.VarChar(256)
  type          String       @db.VarChar(256)
  component     Component    @relation(fields: [component_id], references: [id])
  component_id   String
  dependencies  Dependency[]

  @@index([component_id])
}

model Dependency {
  id              String   @id @default(cuid())
  name            String   @unique  
  command         String
  code            Code     @relation(fields: [code_id], references: [id])
  code_id          String

  @@index([code_id])
}

model ComponentSet {
  id          String                @id @default(cuid())
  name        String
  description String?
  price       Float
  created_at   DateTime           @default(now())
  updated_at   DateTime           @updatedAt
  component_set_items ComponentSetItem[]
  purchases   Purchase[]
}

model ComponentSetItem {
  id            Int          @id @default(autoincrement())
  component_set  ComponentSet @relation(fields: [component_set_id], references: [id])
  component_set_id String
  component     Component    @relation(fields: [component_id], references: [id])
  component_id   String

  @@index([component_set_id])
  @@index([component_id])
}

model Purchase {
  id             Int            @id @default(autoincrement())
  user           User           @relation(fields: [user_id], references: [id])
  user_id         String
  component_set   ComponentSet?  @relation(fields: [component_set_id], references: [id])
  component_set_id String?
  component      Component?     @relation(fields: [component_id], references: [id])
  component_id    String?
  amount         Float
  purchase_date   DateTime       @default(now())
  stripe_checkout_session_id String?
  stripe_payment_id String?
  payment_status String?

  @@index([component_set_id])
  @@index([component_id])
  @@index([user_id])
}

model Review {
  id          Int       @id @default(autoincrement())
  component   Component @relation(fields: [component_id], references: [id])
  component_id String
  user        User      @relation(fields: [user_id], references: [id])
  user_id      String
  rating      Int
  comment     String?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt

  @@index([component_id])
  @@index([user_id])
}